syntax = "proto3";

//
// This protocol is UNSTABLE in the sense of being subject to change.
//

package kurrentdb.protocol;

option csharp_namespace    = "KurrentDB.Protocol.V2";
option java_package        = "io.kurrentdb.protocol.v2";
option java_multiple_files = true;

import "core.proto";

// Record to be appended to a stream.
message AppendRecord {
	// Universally Unique identifier for the record. Must be a guid.
	// If not provided, the server will generate a new one.
	optional string record_id = 1;

	// A collection of properties providing additional system information about the
	// record.
	map<string, kurrentdb.protocol.DynamicValue> properties = 2;

	// The actual data payload of the record, stored as bytes.
	bytes data = 3;
}

// Constants that match the expected state of a stream during an
// append operation. It can be used to specify whether the stream should exist,
// not exist, or can be in any state.
enum ExpectedRevisionConstants {
	// The stream should exist and have a single event.
	EXPECTED_REVISION_CONSTANTS_SINGLE_EVENT = 0;

	// It is not important whether the stream exists or not.
	EXPECTED_REVISION_CONSTANTS_ANY = -2;

	// The stream should not exist. If it does, the append will fail.
	EXPECTED_REVISION_CONSTANTS_NO_STREAM = -1;

	// The stream should exist
	EXPECTED_REVISION_CONSTANTS_EXISTS = -4;
}

// ErrorDetails provides detailed information about specific error conditions.
message ErrorDetails {
	// When the user does not have sufficient permissions to perform the operation.
	message AccessDenied {
		// The reason for access denial.
		string reason = 1;
	}

	// When the stream has been deleted.
	message StreamDeleted {
    // The name of the deleted stream.
    string stream = 1;
  }

	// When the expected revision of the stream does not match the actual revision.
	message WrongExpectedRevision {
		// The actual revision of the stream.
		int64 stream_revision = 1;
	}

	// When the transaction exceeds the maximum size allowed
	// (it's bigger than the configured chunk size).
	message TransactionMaxSizeExceeded {
		// The maximum allowed size of the transaction.
		int32 max_size = 1;
	}
}
