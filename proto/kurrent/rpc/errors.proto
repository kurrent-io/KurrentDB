// ******************************************************************************************
// This protocol is UNSTABLE in the sense of being subject to change.
// ******************************************************************************************

syntax = "proto3";

package kurrent.rpc;

option csharp_namespace = "Kurrent.Rpc";

import "kurrent/rpc/rpc.proto";

// The canonical server error codes for the Kurrent Platform gRPC APIs.
enum ServerError {
  // Default value. This value is not used.
  // An error code MUST always be set to a non-zero value.
  // If an error code is not explicitly set, it MUST be treated as
  // an internal server error (INTERNAL).
  UNSPECIFIED = 0;

  SERVER_ERROR_ACCESS_DENIED = 1 [(kurrent.rpc.error) = {
    status_code: PERMISSION_DENIED,
    has_details: true
  }];

  SERVER_ERROR_BAD_REQUEST = 2 [(kurrent.rpc.error) = {
    status_code: INVALID_ARGUMENT,
    has_details: true
  }];

  SERVER_ERROR_NOT_LEADER_NODE = 5 [(kurrent.rpc.error) = {
    status_code: FAILED_PRECONDITION,
    has_details: true
  }];

  SERVER_ERROR_OPERATION_TIMEOUT = 6 [(kurrent.rpc.error) = {
    status_code: DEADLINE_EXCEEDED
  }];

  SERVER_ERROR_SERVER_NOT_READY = 7 [(kurrent.rpc.error) = {
    status_code: UNAVAILABLE
  }];

  SERVER_ERROR_SERVER_OVERLOADED = 8 [(kurrent.rpc.error) = {
    status_code: UNAVAILABLE
  }];

  SERVER_ERROR_SERVER_MALFUNCTION = 9 [(kurrent.rpc.error) = {
    status_code: INTERNAL
  }];
}

message AccessDeniedErrorDetails {
  // The permission that was required for access.
  // (e.g., "streams:append", "registry:schema:create", etc.)
  optional string permission = 1;

  // The username of the user who was denied access.
  optional string username = 2;
}

message NotLeaderNodeErrorDetails {
  NodeInfo current_leader = 1;

  message NodeInfo {
    // The host of the node
    string host = 1;

    // The port of the node
    int32 port = 2;

    // The instance ID of the node
    optional string node_id = 3;
  }
}
